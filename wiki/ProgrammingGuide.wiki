#summary Programming Guide

= Introduction =

cocos is a framework for building games in pyglet. It provides some conventions and classes to help you structure a scene based application.

a cocos application uses the director singleton, and some scenes. Each scene can have some layers that are the ones that draw to the screen, handle events and in general contain all of the game logic.

Los Cocos is a library that extendes the [http://www.pyglet.org/ pyglet] library intended to make it easier to define a workflow for your game, compose scenes and reuse your code.

== Basic concepts ==

Let's first explain some basic concepts you may need for a better understanding of how it works.
 * Scene: It contains one or more layers, all of them piled up. The scene class is used right away. At all times there's one scene active.
 * Layer: It can display, fullscreen, some particular thing. It can be semi transparent, so the layers beyond the current layer can also be seen. Each of them is individually coded, and here is where you do most of the programming (as well as scenes content ans transitions between scenes). You end up having a family of layers, all subclassed from the layer class. The layer is who does the event handling, as far as the user cares. Each layer is capable of bouncing the event to the layers beyond it, until some layer stops the propagation. This library provides some commonly used layers, such as a menu layer.
 * Director: The director is a shared object between who knows which scene is currently active and which is the complete list of scenes. Is the one who will actually change the scene, after a layer has asked for push, replacement or end of a particular scene.
 * Effect: It can be applied to layers. They transform the layer look, for example, blurred, or moving, or semitransparent, etc.
 * Action:
 * Sprite:

== Requirements ==

 * Python 2.4 or later
 * Pyglet 1.0 or 1.1

== Install ==
{{{
cp -r cocos $PROJECT_HOME
}}}

or

{{{
export PYTHONPATH=$PYTHONPATH:/path/to/cocos
}}}

or 
{{{
import sys
sys.path.insert(0, PATH_TO_COCOS))
}}}

== Contact us ==

Website: http://code.google.com/p/los-cocos/

If you find any bug, please report it at: http://code.google.com/p/los-cocos/issues/list


= Details =

== First Program ==

=== hello_world.py ===
{{{

import cocos

# director is the singleton that controls everything
from cocos.director import director

from pyglet import font

class HelloWorld(cocos.layer.Layer):
    def __init__(self):
        # see pyglet documentation for help on this lines
        ft = font.load('Arial', 36)
        self.text = font.Text(ft, 'Hello, World!', x=100, y=240)
        
    def step(self, dt):
        # this funcition is called on every frame
        # dt is the elapsed time betwen this frame and the last
        self.text.draw()

if __name__ == "__main__":
    # director init takes the same arguments as pyglet.window
    director.init()

    # we start the application running a scene that contains the layer HelloWorld
    director.run( cocos.scene.Scene( HelloWorld() ) )
}}}


== Director, Scene, Layer ==
=== Multiple Layers ===
{{{
import cocos
from cocos.director import director

from pyglet import gl

# we ccreate our own layer
class Square(cocos.layer.Layer):
    def __init__(self, color, x, y, size=50):
        self.x = x
        self.y = y
        self.size = size
        self.color = color
                
    def step(self, dt):
        # this layer just draws a square in self.color with self.size as it side
        gl.glColor4f(*self.color)
        x, y = self.x, self.y
        w = x+self.size; h=y+self.size
        gl.glBegin(gl.GL_QUADS)
        gl.glVertex2f( x, y )
        gl.glVertex2f( x, h )
        gl.glVertex2f( w, h )
        gl.glVertex2f( w, y )
        gl.glEnd()
        gl.glColor4f(1,1,1,1) 
        
if __name__ == "__main__":
    # create the window
    director.init()

    # create our scene with some layers. Layers in scene creation are automatically
    # assigned a z-value from 0 to len(layers)-1
    # this means the first layers will be in the bottom, the last one on top.
    sc = cocos.scene.Scene( 
        *[ Square((0.03*i,0.03*i,0.03*i,1) , i*20, i*20) for i in range(5,20) ]
        )

    # we can add more layers after the scene has been created
    # we specify z-value and a name, used as reference if we want to remove it later
    sc.add( 5.5, Square((1,0,0,0.5), 150,150, 210 ), "big_one" )

    # run it
    director.run( sc )
}}}
=== Events ===
All layers are event handlers from the pyglet event framework. When a layer is being shown, it event handlers will be active.

See:
 -  http://www.pyglet.org/doc/programming_guide/the_pyglet_event_framework.html
 
=== Scenes Stack ===


== Sprites ==
=== Actions ===
=== Implementing Actions ===

== Transitions ==
=== Implementing New Transitions ===

== Effects ==
=== Implementing New Effects ===

= Packaged Layers =
== Basic Layers ==
`ColorLayer( *color )` creates a layer filled with color (RGBA)
`MultiplexLayer( *layers )` A Composite layer that only enables one layer at the time

== Menus ==