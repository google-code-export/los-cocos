#summary Cocos Programming Guide
#labels Phase-Implementation

= Introduction =

[http://code.google.com/p/los-cocos "Cocos"] is a framework for building games, demos, and other graphical/interactive applications. It is built over [http://www.pyglet.org/ pyglet]. It provides some conventions and classes to help you structure a "scene based application".

A cocos application consists of several scenes, and a workflow connecting the different scenes. It provides you a "director" (a singleton) which handles that workflow between scenes. Each scene is composed of an arbitrary number of layers; layers take care about drawing to the screen (using the pyglet and OpenGL APIs), handle events and in general contain all of the game/application logic.

Cocos simplifies the game development in these areas:
  * Defining a workflow for your game
  * Composing scenes and scene components
  * Creating special effects & transitions in and between scenes
  * Managing sprites
  * Basic menus
  * and more

== Basic concepts ==

There are some basic concepts introduced in this library that you will need to know when developing a cocos application:

=== Scenes & Transitions ===

An scene is a more or less an independent piece of the app workflow. Some people may call them "screens" or "stages". Your app can have many scenes, but only one of them is active at a given time.

For example, you could have a game with the following scenes: Intro, Menu, Level 1, Cutscene 1, Level 2, Winning cutscene, losing cutscene, High scores screen. You can define every of one of these scenes more or less as separate apps; there is a bit of glue between them containing the logic for connecting scenes (the intro goes to the menu when interrupted or finishing, Level 1 can lead you to the cutscene 1 if finished or to the losing cutscene if you lose, etc.).

A cocos Scene is composed of one or more layers, all of them piled up. Layers give the scene an appearance and behavior; the normal use case is to just make instances of Scene() with the layers that you want. 

There is also a family of Scene classes called "Transitions", which allow you to
make transitions between two scenes (fade out/in, slide from a side, etc).

=== Director ===

The director is the component which takes care about going back and forth between scenes.

The director is a shared (singleton) object. It knows which scene is currently active, and it handles a stack of scenes to allow things like "scene calls" (pausing a scene and putting it on hold while other enters, and then returning to the original). Is the one who will actually change the scene, after a layer has asked for push, replacement or end of the current scene.

=== Layers & Effects ===

A layer has as size the whole drawable area (window or screen), and knows how to draw itself. It can be semi transparent (having holes and/or partial transparency in some/all places), allowing to see other layers behind it. Layers are the ones defining appearance and behavior, so most of your programming time will be spent coding Layer subclasses that do what you need. The layer is where you define event handlers. Events are propagated to layers (from front to back) until some layer catchs the event and accepts it.

Even if any serious app will require you to define some layer classes, cocos provides a library of useful predefined layer (a simple menu, solid color, a multiplexor between other layers, and a layer to add animated sprites/particle effects)

Besides that, you can apply an "effect" to a layer; effects transform the appearance of the whole layer. There are some classes to allow you to more or less easily define new effects. Cocos bring a couple of ready-to-use effects (colorization i.e. changing color or transparency of a layer, and repositioning i.e. moving or resizing a layers). Effects can be dynamically enabled/disabled/reconfigured; this allow to redefine the given effects to create effects as "flickering" or "shaking", and apply these effects to your layers.

=== Actions & Sprites ===

A Cocos' sprite is like any other computer sprite. It is a 2D image that can be moved, rotated, scaled, etc.

These sprites supports actions. An Action is "something" that the sprite can do, and an sprite can do multiple actions at the same time. Also, 2 or more different sprites can run the same action at the same time. There are different kind of actions. There are 3 actions categories:
  * Actions that lets you transform the sprite's properties (position, rotation, transparency...)
  * Actions that combines other actions
  * Actions that do something else

There is another way to categorize the actions:
  * Interval Actions
  * Non-Interval Actions

The _Interval_ _Actions_ are the ones that take place in a certain period of time and they have certain properties like:
  * They can run **forward** in time
  * They can run **backwards** in time
  * They can be **accelerated**
  * The flow of time can be transformed using a custom function
 
== Requirements ==

 * Python 2.4 or later
 * Pyglet 1.0 or 1.1

== Install ==
{{{
cp -r cocos $PROJECT_HOME
}}}

or

{{{
export PYTHONPATH=$PYTHONPATH:/path/to/cocos
}}}

or 
{{{
import sys
sys.path.insert(0, PATH_TO_COCOS))
}}}

== Contact us ==

Website: http://code.google.com/p/los-cocos/

If you find any bug, please report it at: http://code.google.com/p/los-cocos/issues/list


= Details =

== A First Program ==

The most basic program (which does something) you can make, does the following:

 # Define a layer which shows something (For example, a "Hello world" string). To define a new layer class you inherit `cocos.layer.Layer`. In the `step' method you should define the code that paints the layer on screen (using pyglet or opengl functions):
{{{
class HelloWorld(cocos.layer.Layer):
    def __init__(self):
        # see pyglet documentation for help on this lines
        ft = font.load('Arial', 36)
        self.text = font.Text(ft, 'Hello, World!', x=100, y=240)
        
    def step(self, dt):
        # this funcition is called on every frame
        # dt is the elapsed time betwen this frame and the last
        self.text.draw()
}}}
 # Start the director. This initializes the window/display, and sets up cocos
{{{
    # director init takes the same arguments as pyglet.window
    director.init()
}}}
 # Create an instance of the layer defined above...
{{{
    # We create a new layer, an instance of HelloWorld
    hello_layer = HelloWorld ()
}}}
 # ...and a scene, with just that layer inside:
{{{
    # A scene that contains the layer hello_layer
    main_scene = cocos.scene.Scene (hello_layer)
}}}
 # Finally, tell the director to run with that scene
{{{
    # And now, start the application, starting with main_scene
    director.run (main_scene)
}}}

Of course, the last three steps sometimes can be shortened to just `director.run( cocos.scene.Scene( HelloWorld() ) )`; our hello world app is a bit verbose to make clear which are the steps involved.


This example is complete at `samples/hello_world.py`, and you can run it and play with it:

=== hello_world.py ===
{{{
import cocos
from cocos.director import director

from pyglet import font

class HelloWorld(cocos.layer.Layer):
    def __init__(self):
        # see pyglet documentation for help on this lines
        ft = font.load('Arial', 36)
        self.text = font.Text(ft, 'Hello, World!', x=100, y=240)
        
    def step(self, dt):
        # this funcition is called on every frame
        # dt is the elapsed time betwen this frame and the last        
        self.text.draw()

if __name__ == "__main__":
    # director init takes the same arguments as pyglet.window
    director.init()
    # We create a new layer, an instance of HelloWorld
    hello_layer = HelloWorld ()
    # A scene that contains the layer hello_layer
    main_scene = cocos.scene.Scene (hello_layer)
    # And now, start the application, starting with main_scene
    director.run (main_scene)
    # or you could have written, without so many comments:
    #      director.run( cocos.scene.Scene( HelloWorld() ) )
}}}

Try for example changing the window parameters (arguments passed to `director.init`) to change the window size or make a fulls creen app. Or try modifiying the step method to display something else.

== Director, Scene, Layer ==

This section shows how to make more complex apps, with more layers and scenes.

=== Multiple Layers ===

In this demo, we will make a scene with several layers. We will create several instances of a single layer class for brevity, although of course you could use instances of different layer classes.

We star the example defining a layer class which shows squares. Its constructors has arguments to change the square position, color and size:

{{{
class Square(cocos.layer.Layer):
    """Square (color, c, y, size=50) : A layer drawing a square at (x,y) of
    given color and size"""
    def __init__(self, color, x, y, size=50):
        self.x = x
        self.y = y
        self.size = size
        self.color = color
                
    def step(self, dt):
        gl.glColor4f(*self.color)
        x, y = self.x, self.y
        w = x+self.size; h=y+self.size
        gl.glBegin(gl.GL_QUADS)
        gl.glVertex2f( x, y )
        gl.glVertex2f( x, h )
        gl.glVertex2f( w, h )
        gl.glVertex2f( w, y )
        gl.glEnd()
        gl.glColor4f(1,1,1,1) 
}}}

Making a scene with more than one layer is very easy: Just use multiple parameters when creating the `Scene` instance: `Scene (a_layer, another_layer, a_third layer)`. In our demo, we will create a large number of layers and put them into a list:

{{{
    layers = [ Square((0.03*i,0.03*i,0.03*i,1) , i*20, i*20) for i in range(5,20) ]
}}}

This list contains layers showing 15 overlapping squares, going from the bottom-left of your screen to the top-right and going from dark gray to light gray.

Now, let's create a scene with all those layers inside:

{{{
    sc = cocos.scene.Scene(*layers)
}}}

Note that the layers are passed from bottom to top. That means that the last layer of the list in our example (the light gray top-right square) will be in front of every other layer. Every layer has a "z-value", a numeric value which is higher for "upper" layers. When you create a Scene, each layer is added with a "z-value" equal to its position in the argument list (0 to 14 in the example above).

Sometimes you will need to add or remove layers from a scene after its creation. You can do that with the `add` and `remove` methods of the scene. For example, you can call:

{{{
    sc.add( 5.5, Square((1,0,0,0.5), 150,150, 210 ), "big_one" )
}}}

This adds a large, red, semitransparent square more or less at the middle of the screen. The first argument, "5.5" is the z-value of the new layer. 5.5 means that it will be over the first 6 small squares (the ones with z-value 0 to 5) and below the other 9 (the ones with zvalues 6 to 14). The last argument "big_one" is optional; it is a name you can give to the layer, to reference it later if you want to remove it. For example, if you later want to remove the big red square you can do it like this:

{{{
    sc.remove ("big_one")
}}}

This example is complete at `samples/multiple_layers.py`, and you can run it and play with it:

{{{
import cocos
from cocos.director import director

from pyglet import gl

# Defining a new layer type...
class Square(cocos.layer.Layer):
    """Square (color, c, y, size=50) : A layer drawing a square at (x,y) of
    given color and size"""
    def __init__(self, color, x, y, size=50):
        self.x = x
        self.y = y
        self.size = size
        self.color = color
                
    def step(self, dt):
        gl.glColor4f(*self.color)
        x, y = self.x, self.y
        w = x+self.size; h=y+self.size
        gl.glBegin(gl.GL_QUADS)
        gl.glVertex2f( x, y )
        gl.glVertex2f( x, h )
        gl.glVertex2f( w, h )
        gl.glVertex2f( w, y )
        gl.glEnd()
        gl.glColor4f(1,1,1,1) 
        
if __name__ == "__main__":
    director.init()
    # Create a large number of layers
    layers = [ Square((0.03*i,0.03*i,0.03*i,1) , i*20, i*20) for i in range(5,20) ]
    # Create a scene with all those layers
    sc = cocos.scene.Scene(*layers)
    # You can also add layers to a scene later:
    sc.add( 5.5, Square((1,0,0,0.5), 150,150, 210 ), "big_one" )
    director.run( sc )
}}}

Things you can try to do with this code:
 * rearrange the layer order, 
 * create the scene initially empty (`sc = cocos.scene.Scene()`), add all layers manually (with `sc.add` in a loop), and remove a few by name.

=== Events ===
All layers are event handlers from the pyglet event framework. When a layer is being shown, it event handlers will be active.

See:
 -  http://www.pyglet.org/doc/programming_guide/the_pyglet_event_framework.html
 
=== Scenes Stack ===

Note that you can add a single layer object to multiple
scenes, allowing sharing (this can be useful if you want to reuse a layer, specially if
you need it to keep state between scenes).

== Sprites ==

=== Actions ===

==== Transformation actions ====
The _duration_ parameter is specified in seconds. The x,y parameters are specified in pixels. The (0,0) point is the bottom-left point.
 * *Move*( (delta_x,delta_y,0), duration)
   * Moves the sprite delta_x and delta_y pixels in duration time. 
 * *Goto*( (x,y,0), duration )
   * Moves the sprite to the x,y coordinates.
   * The difference between _Move()_ and _Goto()_ is that _Move()_ is relative to the current coordinates and _Goto()_ is absolute.
 * *Rotate*( degrees, duration )
   * Rotates the sprites degrees in duration time. Positives degrees rotates the sprite counter-clockwise.
   * The rotation is relative to the current angle.
 * *Scale*( zoom_factor, duration )
   * Scales the sprites zoom_factor in duration time.
   * The scale is relative to the current zoom_factor.
 * *Jump*( height, x, number_of_jumps, duration )
   * Moves the sprites x pixels in duration time. x is relative to the current x position.
   * During that movement the sprite will do a number_of_jumps of height.
 * *Bezier*( bezier_configuration, duration )
   * Moves the sprite using a bezier path in duration time. The movement is relative to the current position.
 * *Place*( (x,y,0) )
   * Places the sprite in the x,y coordinates.
 * *Animate*( animation_name )
   * Animates the sprite using an animation name.
   * Before running an animation, you need to create an _Animation_, and you must add it to the sprite.
 * *!FadeIn*( duration )
   * Fades the sprite in in duration time.
 * *!FadeOut*( duration )
   * Fades the sprite out in duration time.
 * *Blink*( times_to_blink, duration )
   * Blinks the sprite times_to_blink in duration time.
 * *Show*()
   * Shows the sprite.
 * *Hide*()
   * Hides de sprite. To show it again, use the Show action.

==== Composite actions ====
 * *Repeat*( action, times, mode=!PingPongMode )
   * Repeats an action.
   * If _times_ is -1, then it will repeat the action forever. Default is -1
   * If mode is !PingPongMode (default mode) it will repeat the action forwards and backwards.
   * If mode is !RepeatMode, then it will always repeat the actions forwards.
 * *Sequence*( list_of_actions, dir=!ForwardDir ) _or_ action1 + action2 + action3...
   * Runs a list of actions is sequential mode. First it runs the first action. When this action finished, it execute the next one until the last one is executed.
 * *Spawn*( list_of_actions ) _or_ action1 | action2 | action3...
   * Execute the list_of_actions at the same time

==== Misc Actions ====
 * *!CallFunc*( function )
   * Calls a function. Just that.
   * It is useful to when you want to trigger something.
 * *CallFuncS*( function )
   * It is the same is _!CallFunc_ with the difference that _function_ will receive the sprite as the 1st argument
 * *Delay*( seconds )
   * It will delay the execution some _seconds_
 * *!RandomDelay*( lo_seconds, hi_seconds )
   * It will delay the execution random seconds between _lo_seconds_ and _hi_seconds_

You can find examples here: _los-cocos/test/test_sprite.py_

=== Interval Actions ===
An interval action is an action that takes place within a certain period of time. It has an start time and a ﬁnish time. The ﬁnish time is the parameter _duration_ plus the start time.
 
These _Interval_ _Actions_ have some interesting properties, like: 
 * They can run Forward (default) 
 * They can run Backwards 
 * They can be accelerated. You can transform the time using a custom function.

For example, if you run an action in a _Forward_ direction and the you run it again in a _Backward_ direction, then you are simulation a Ping-Pong movement. 

These actions has 3 special parameters: 
 * _dir_ (direction): It can be !ForwardDir or !BackwardDir . Default is: !ForwardDir 
 * _mode_ (repeat mode): It can be !PingPongMode or !RepeatMode . Default is : !PingPongMode . 
 * _time_func_ (a function): A function that alters the speed of time

Examples of _Interval_ _Actions_:
{{{
    move = Move( (200,0,0), 5 ) # Moves 200 pixels to the right in 5 seconds. 
                                # Direction: ForwardDir (default) 
                                # RepeatMode: PingPongMode (default) 
                                # time_func: No alter function (default) 

    rmove = Repeat( move )      # Will repeat the action *move* forever 
                                # The repetitions are in PingPongMode 
                                # times: -1 (default) 
    
    move2 = Move( (200,0,0), 5, time_func=accelerate ) 
                                # Moves 200 pixels to the right in 5 seconds 
                                # time_func=accelerate. This means that the 
                                # speed is not linear. It will start to action 
                                # very slowly, and it will increment the speed 
                                # in each step. The total running time will be 
                                # 5 seconds. 
    move3 = Move( (200,0,0), 5, dir=BackwardDir ) 
                                # Moves 200 pixels to the **left** in 5 seconds 
                                # But when you use this direction (BackwardDir) 
                                # the starting coords and the finishing coords 
                                # are inverted 
}}}

=== Implementing Actions ===
Let's see in detail how the _Goto_ action is implemented:
{{{
class Goto( IntervalAction ):
}}}
It is a sublcass of _!IntervalAction_, since this an action that takes within a certain
period of time

{{{
    def init(self, dst_coords, duration=5):

        self.end_position = Point3( *dst_coords )
        self.duration = duration
}}}
Define in the _init_ method the arguments that you action shall receive.
_Goto_ receives a tuple, the destination coordinates, and a duration time specified in seconds. The coordinates are transformed in a Point3 structure.

{{{
    def start( self ):
        self.start_position = self.target.translate

}}}
The _start_ method is called before the action starts. The difference with _init_ is that at this time you know the _target_ of your action, the target sprite.

{{{
    def step(self,dt):
        delta = self.end_position-self.start_position
        self.target.translate = (self.start_position +
                    delta * (
                        min(1,float(self.get_runtime() )/self.duration)
                    ))
}}}
The calculation is done in the _step_ method. 


== Transitions ==
=== Implementing New Transitions ===

== Effects ==

=== Implementing New Effects ===

= Packaged Layers =
== Basic Layers ==
`ColorLayer( *color )` creates a layer filled with color (RGBA)
`MultiplexLayer( *layers )` A Composite layer that only enables one layer at the time

== Menus ==