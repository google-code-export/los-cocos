branch of trunk to investigate adding collision functionality to cocos
see ongoing_collision_work.txt for goals, decisions, progress

r1127 : begin merge preparation for collision 
working copy clean and fully checked-in to begin pre merge preparation
				
*** This is the last natural revision in the collision1 branch, later ones will be moving and deleting things to merge collision with trunk ***

Merge will have some quirks:
	I want to merge only some parts of collision, and nothing from editor, runner nor level_loader_demo
	For convenience along develpment I used dir collision_test to hold all related test scripts and notes, not the canonical cocos locations

My merge plan is:
	move files in branch to canonical locations
	rename files if necessary
	delete all unwanted files
	update from trunk, commit
	--reintegrate
	delete branch
	
	(after release work in protoeditor and persistence should need new branches, 
and deleted files will be added if deemed necesary; history will be lost for this files but it is acceptable)
	


--------------------------suspend runner------------------------------------------

r1126 : runner: added exit actor

r1125: protoeditor: fixed bad 'others' section saving, both for level and actor
runner: EnemyChained with basic behavior 

--------------------------loader sample becomes outdated here----------------------

r1124: runner: EnemyWanderer with basic behavior

r1123: runner: sketch enemy behavior

r1122: runner: spec for enemies, updating collision data in the level loop

r1121: runner: basic, nonfinal scroll following player movement"

r1118-1120: runner: player moves, but theres a defect: movement looks chopy
About the issue:
All the user code is float, 
At present scroller set focus is not called, so intify problems comming from focus is not the issue
Framerates, with vsync enabled move between 57-60, chopiness seem worse than that
But there are some instability in the dt stream:
dt: 0.0165353417823
dt: 0.0174390879288
dt: 0.0156268464288
dt: 0.0167842560996
dt: 0.0169189100849
dt: 0.0167127386302
dt: 0.0306580864328
dt: 0.00280454638788
dt: 0.0163652084273
dt: 0.0164216401805
dt: 0.0168060465785
dt: 0.0168957227804
dt: 0.0165794814704
dt: 0.0185752658508
dt: 0.0143336653122
Switching from pyglet 1.1.4 release to current 1.2dev fixes the issue
with 1.2dev dt is more stable:
dt: 0.0163998497016
dt: 0.016668598942
dt: 0.0165618814682
dt: 0.0168247640412
dt: 0.0168225291203
dt: 0.0163165988973
dt: 0.0167345291091
dt: 0.0176885609763
dt: 0.0165138306684
dt: 0.0159159893227
dt: 0.0167540846672
dt: 0.0167834180042
dt: 0.0164889671732
dt: 0.0164613100268
dt: 0.0178114816269

upgrading the step style from
v = a*dt , x = x0 + dt*v
to
v = a*dt , x = 1/2 a dt**2 + v*dt + x0

which should be more stable shows litle (or none) improvement

Theres also an issue on pyglet tracker about inestable dt with some ati drivers, but I cannot upgrade just now (theres the risk to render 1.2dev unrunable with certain ATI drivers, another issue)

r1117: runner: spice up visuals with tree color variations

r1115: runner: upgraded actors check-in
tasks performed at actors check-in now conditional to cls name, which informaly indicates the ingame role.
replaced generic actor containers with enemies, jewels, player
player receives controller at check-in

r1114: runner: added wconsts arg for level instantiation - added mising controller.py

r1113: runner: pass runtime params to level, added 'args' to loader.load_level to carry runtime params, this allows to no edit loader module to pass runtime params

r1112 runner ads 'level' as non stored param in actor creation 

r1109-r1111 protoeditor: upgraded runner to be a load level demo, copied
final result to dir level_loader_demo to allow further fleshing of runner

r1108 protoeditor: more correct start_editor for unix like OS

r1107 protoeditor: tutorial started

r1106 protoeditor: simplify parameters flow to instantiate

r1105 protoeditor: better separation of ingame vs editor types

r1104 protoeditor: simplify initial gamedef for easier walktrough  

r1102-1103 protoeditor code detached from game specific details - use runner\start_editor.py to do a sample session.

r1101 begin to detach game specific from protoeditor - create gamedir

r1100 protoeditor: added del, help, resize actors with interpreter

r1099 editor: more interpreter friendly, new commands quit, force quit. Disregard quit if file not saved 

r1098 added cmds duplicate_selection, pprint_selection  

r1097 editor proxies got their own file

r1096 set mime-type=application/octet-stream for *.lvl to not corrupt pickle, sample level recreated

r1095 protoeditor load - save - new first sketch. Working, code needs reorganization.

r1094 separate game specific settings from editor code

r1090-r1093 moved e0 to its own directory, renamed, added resources, added ActorProxy and LevelProxy in the way to add load-save 

r1089 e0_protoeditor.py : cleanup, strange bug in keyscrolling discovered, bug cause chain determined.
While upgrading e0 to support persistence, scrolling by keys broke: up and right will work seemingly ok, down and left will not respond.
Strange, because the event handling was not changed.
Morphing the code in small steps from e0 to the problematic version showed that increasing separation between sprites in initial population activated the bad behavior
Causality chain was discovered to be:  
    . more separation implies less visible actors
    . which renders faster
    . intel chipset don't honors pyglet vsync=True
    . produces small dt
    . ScrollerManager intifies focus at enter and exit
    . thus the small moves required by update_autoscroll are lost

r1088 added collisions to b0 (b1_crash_and_burn_cocosnode.py)

r1087 cleanup e0_protoeditor.py

r1086 added CShape.copy  - refined example d3 to e0_protoeditor.py, an editor helper that handles scroll / zoom / selection. See detailed description in protoeditor_spec.txt

r1084-1085 any_near(obj, near_distance) to not see obj

r1083 utest remove_tricky and any_near

r1082 basic tests that any CollisionManager must pass using AARectShape

r1081 added .any_near to collman API - added balldrive toy game

r1079 added .removed_tricky - API collision model deemed complete

r1078 minor change to test d2

r1077 added functionality related to mouse selection

r1073-r1075
Added AARectShape, modified benchmark code to parametrize over cshapes
Explored implementation for RectShape in collision_tests\interactive_test_RectShape_overlaps.py
Decided RectShape not worthwhile
Updated informative text files for collision dev 

r1072 Initial code checkin.
Look ongoing_collision_work.txt for discussion about the how and why and the
decisions taken.
Look at end of the same file for description of Milestone 1 and completion
status.

r1071 created trunk's branch https://los-cocos.googlecode.com/svn/branches/collision1

